const fs = require("fs");
const path = require("node:path");
const rules = require("../../../json/rulesRoles.json");
const { ipcRenderer } = require('electron');

const settingsRole = function () {
    // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    let appData = { ...rules };

    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const systemsContainer = document.getElementById('systems-container');
    const addSystemBtn = document.getElementById('add-system-btn');
    const applyBtn = document.querySelector('.apply-setting');

    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    function generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    // –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º –∏ —Ä–æ–ª–µ–π
    function renderSystems() {
        systemsContainer.innerHTML = '';

        Object.entries(appData).forEach(([systemName, roles]) => {
            const systemId = generateId();
            const systemCard = document.createElement('div');
            systemCard.className = 'system-card';
            systemCard.innerHTML = `
                    <p style="margin: 0; color: #666886">–ü—Ä–æ–µ–∫—Ç</p>
                    <div class="system-header">
                        <input type="text" class="system-name" value="${systemName}"
                            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã" data-system="${systemName}">
                        <div class="system-actions">
                            <button class="btn btn-danger delete-system">
                                <span class="btn-icon">üóëÔ∏è</span>
                            </button>
                        </div>
                    </div>
                    <p style="margin: 0; color: #666886">–†–æ–ª–∏</p>
                    <div class="roles-container" id="roles-${systemId}"></div>
                    <button class="btn btn-primary add-role-btn">
                        + –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å
                    </button>
                `;

            systemsContainer.appendChild(systemCard);

            // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–æ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
            const rolesContainer = document.getElementById(`roles-${systemId}`);
            roles.forEach(role => {
                const roleItem = document.createElement('div');
                roleItem.className = 'role-item';
                roleItem.innerHTML = `
                        <input type="text" class="role-name" value="${role}"
                            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏" data-role="${role}">
                        <div class="role-actions">
                            <button class="role-action-btn delete-role" title="–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å">
                                ‚úï
                            </button>
                        </div>
                    `;
                rolesContainer.appendChild(roleItem);
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
            const systemInput = systemCard.querySelector('.system-name');
            const deleteSystemBtn = systemCard.querySelector('.delete-system');
            const addRoleBtn = systemCard.querySelector('.add-role-btn');

            // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            systemInput.addEventListener('change', (e) => {
                const oldName = systemInput.dataset.system;
                const newName = e.target.value.trim();

                if (newName && newName !== oldName) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª–∏ –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
                    appData[newName] = [...appData[oldName]];
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
                    delete appData[oldName];
                    // –û–±–Ω–æ–≤–ª—è–µ–º dataset
                    systemInput.dataset.system = newName;
                }
            });

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            deleteSystemBtn.addEventListener('click', () => {
                const systemName = systemInput.dataset.system;
                delete appData[systemName];
                renderSystems();
            });

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏
            addRoleBtn.addEventListener('click', () => {
                const systemName = systemInput.dataset.system;
                appData[systemName].push('–ù–æ–≤–∞—è —Ä–æ–ª—å');
                renderSystems();
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–æ–ª–µ–π
            systemCard.querySelectorAll('.role-item').forEach(roleItem => {
                const roleInput = roleItem.querySelector('.role-name');
                const deleteRoleBtn = roleItem.querySelector('.delete-role');
                const originalRole = roleInput.dataset.role;

                // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏
                roleInput.addEventListener('change', (e) => {
                    const systemName = systemInput.dataset.system;
                    const newRole = e.target.value.trim();
                    const roleIndex = appData[systemName].indexOf(originalRole);

                    if (roleIndex !== -1 && newRole) {
                        appData[systemName][roleIndex] = newRole;
                        roleInput.dataset.role = newRole;
                    }
                });

                // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
                deleteRoleBtn.addEventListener('click', () => {
                    const systemName = systemInput.dataset.system;
                    const roleIndex = appData[systemName].indexOf(originalRole);

                    if (roleIndex !== -1) {
                        appData[systemName].splice(roleIndex, 1);
                        renderSystems();
                    }
                });
            });
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    addSystemBtn.addEventListener('click', () => {
        const newSystemName = `–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ${Object.keys(appData).length + 1}`;
        appData[newSystemName] = ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'];
        renderSystems();
    });

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    applyBtn.addEventListener('click', function () {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        function sortObjectByKey(obj) {
            const entries = Object.entries(obj);
            entries.sort();
            return Object.fromEntries(entries);
        }
        fs.writeFile(path.join(__dirname, '../../../json/rulesRoles.json'), JSON.stringify(sortObjectByKey(appData)), function (err) {
            if(err){
                alert("An error ocurred updating the file"+ err.message);
            }
        });
        ipcRenderer.send('update-page');
        const ready = this.querySelector('a');
        ready.textContent = '–ü—Ä–∏–º–µ–Ω–µ–Ω–æ';
        ready.style.color = "#37d67a";
        ready.style.border = "2px solid rgb(55, 214, 122)";
        setTimeout(() => {
            ready.textContent = '–ü—Ä–∏–º–µ–Ω–∏—Ç—å';
            ready.style.color = "#ffffff";
            ready.style.border = "2px solid rgba(255,255,255,0.1)";
        }, 1000);
    });

    renderSystems();
}

module.exports = { settingsRole }